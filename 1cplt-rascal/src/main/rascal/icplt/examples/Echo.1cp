global N(
  init: boolean,
  neighs, senders: N[],
  parent, sender:  N)
{
  main:
    parent := self ;
    if init then
      roll

  roll:
    foreach<N> neigh in neighs do
      if neigh != parent then
        self -> neigh.sender |> 
          recv

  recv:
    senders := cons(sender, senders) ;
    if !init then {
      if
        // Step 1: First receive?
        senders.length == 1
      then {
        // Step 2: Send to non-parents
        parent := sender ;
        roll } ;
      if
        // Step 3: Last receive?
        senders.length == neighs.length
      then
        // Step 4: Send to parent
        self -> parent.sender |> 
          recv
    }
}

process N[1](true,  [      N[2], N[3], N[4]], [], N[1], N[1])
process N[2](false, [N[1],       N[3], N[4]], [], N[2], N[2])
process N[3](false, [N[1], N[2],       N[4]], [], N[3], N[3])
process N[4](false, [N[1], N[2], N[3]      ], [], N[4], N[4])
